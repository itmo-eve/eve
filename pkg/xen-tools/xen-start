#!/bin/sh

bail() {
   echo "$@"
   exit 1
}

domID() {
   # we may need to wait for domain to come online for us to manipulate it (timing out in under 30 sec)
   # shellcheck disable=SC2034
   for _ in 1 2 3; do
     ID=$(xl domid "$1")
     sleep 8
     [ -z "$ID" ] || break
   done >/dev/null 2>&1

   echo "$ID"
}

handleKnownState() {
  STATUS="$1"

  # an additional check we do for running domains is to make sure device model is still around
  # Note that when the domU is rebooted from inside the DM_PID changes and for
  # a short time device-model-pid is empty, and for a short time we might have
  # a DM_PID in xenstore but the qemu process is not running.
  # Thus the caller has to handle a transient broken state
  if [ "$1" = running ] || [ "$1" = paused ]; then
    if DM_PID=$(xenstore read "/local/domain/$ID/image/device-model-pid" 2>/dev/null) &&
       ! (readlink "/proc/$DM_PID/exe" | grep -q qemu-system-); then
        STATUS=broken
    fi
  fi

  echo "$STATUS"
}

xen_info() {
   # we expect to get rbpscd where every letter can also be a dash (-)
   # Name    ID    Mem    VCPUs    State    Time(s)
   case $(xl list "${1:- }" 2>/dev/null | awk '{st=$5;} END {print st;}') in
      *c*) handleKnownState broken  ;;
       *d) handleKnownState halting ;;
      *s*) handleKnownState halting ;;
      *p*) handleKnownState paused  ;;
      *b*) handleKnownState running ;;
       r*) handleKnownState running ;;
       # returning last reported state in case of undetermined domain state from xen
       # but checking id DM died in which case we return broken
   ------) handleKnownState "$2" ;;
        *) handleKnownState broken  ;;
   esac
}

# pre-flight checks
[ $# -lt 2 ] && bail "Usage: $0 <domain name> <domain config> [overwrite system-product-name]"

# declare the status as running
mkdir -p /run/tasks >/dev/null 2>&1
echo running > "/run/tasks/$1"

# FIXME: this really needs to be managed by runc
keyctl link @u @s

# if HVM capabilities exist, we run PV guests as PVH
if grep -q 'type.*=.*"pv"' "$2"; then
   # shellcheck disable=SC2089
   xl info | grep -q 'virt_caps.*hvm' && EXTRA_ARGS='type="pvh"'
fi

# create domain in a paused state
# shellcheck disable=SC2090
xl create "$2" -p $EXTRA_ARGS || bail "xl created failed"

# we may need to wait for domain to come online for us to manipulate it (timing out in under 30 sec)
ID=$(domID "$1")

if [ $# -eq 3 ]
then
  PRODUCT_NAME="OpenStack Compute"
  # FIXME: it is not persist after VM reboot from inside
  xenstore-write "/local/domain/$ID/bios-strings/system-product-name" "$PRODUCT_NAME" || echo "fail to set product name"
fi

# check it timed out
if [ -z "$ID" ]; then
  echo broken > "/run/tasks/$1"
else
  # finally unpause the domain
  xl unpause "$ID" || bail "xl unpause failed"
fi

# now start polling for domain status in the background
# (note: our use of mv to make sure file reads on the other side are atomic)
# (note: there will be a 5sec wait before the next xen_info() call in case if we get a nondeterministic domain state)
# We wait and retry if we see a broken state to handle transients due to reboot
# from inside the domU
(while true; do
  last_state=$(cat "/run/tasks/$1" 2>/dev/null)
  if [ -z "$last_state" ]; then
    last_state=running
  fi
   xen_info "$(domID "$1")" "$last_state" > "/run/tasks/$1.tmp"
   if grep -q broken "/run/tasks/$1.tmp"; then
     sleep 30
     xen_info "$(domID "$1")" "$last_state" > "/run/tasks/$1.tmp"
   fi
   mv "/run/tasks/$1.tmp" "/run/tasks/$1"
done) &

# and start watching over the console: note that we loop forever
# in anticipation of potential domain reboots - we rely on xen_info
# to declare domain broken if it can't be found for a long time
while true; do
   xl console "$1" < /dev/null
   sleep 5
done
