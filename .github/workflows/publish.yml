---
name: Publish
on:
  push:
    branches:
      - "master"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ARM64, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine architecture prefix
        run: |
          echo "ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/aarch64/arm64/')" >> "$GITHUB_ENV"
      - name: Login to DockerHUB
        run: |
          echo "${{ secrets.RELEASE_DOCKERHUB_TOKEN }}" |\
             docker login -u "${{ secrets.RELEASE_DOCKERHUB_ACCOUNT }}" --password-stdin
      - name: Build packages
        run: |
          # GH Actions convert our annotated tags into plain ones,
          # so we need to convert it back (but only if it exists).
          if [ -n "$(git tag)" ]; then
             git config --global user.name "Edge Virtualization Engine"
             git config --global user.email "eve@lfedge.org"
             for t in $(git tag); do
                git tag -a -m"Release $t" -f "$t" "$t"
             done
          fi
          # sadly, our build sometimes times out on network access
          # and running out of disk space: re-trying for 3 times
          for i in 1 2 3; do
             if make LINUXKIT_PKG_TARGET=push pkgs; then
                break
             else
                # the most likely reason for 'make pkgs' to fail is
                # the docker cache produced by the build exhausting
                # disk space. So the following can't hurt before we
                # retry:
                docker rmi -f `docker image ls -q` || :
                docker system prune -f || :
             fi
          done
      - name: Build EVE for Xen
        # build #1 without push (do not push either unless both can build)
        run: |
          rm -rf dist dist.xen
          make eve
          mv -f dist dist.xen
      - name: Build and push EVE for KVM
        # since build #1 works, build and push #2
        run: |
          make LINUXKIT_PKG_TARGET=push HV=kvm eve
          docker tag lfedge/eve:snapshot-${{ env.ARCH }} lfedge/eve:snapshot-kvm-${{ env.ARCH }}
          docker push lfedge/eve:snapshot-kvm-${{ env.ARCH }}
      - name: Build and push EVE for Xen
        # redo build #1 with push
        run: |
          rm -rf dist
          mv -f dist.xen dist
          make LINUXKIT_PKG_TARGET=push eve
          docker tag lfedge/eve:snapshot-${{ env.ARCH }} lfedge/eve:snapshot-xen-${{ env.ARCH }}
          docker push lfedge/eve:snapshot-xen-${{ env.ARCH }}
      - name: Create a GitHub release and clean up artifacts
        id: create-release
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: |
            console.log(context)
            tag = context.payload.ref.split('/', 3)[2] // could we use context.ref ?

            // we're mapping builds of certain branches to fake tags to be able to
            // have a place where we publish the build assets
            if (tag === 'main' || tag === 'master') {
              tag = '0.0.0'
            }

            // first create a release -- it is OK if that fails,
            // since it means the release is already there
            try {
              const raw = (await github.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: 'Release ' + tag,
                prerelease: true,
              })).data
              console.log(raw)
            } catch (e) {}

            // get the release ID
            const release = (await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag,
            })).data

            // get assets for that ID
            const assets = (await github.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
            })).data

            // remove all assets (since we will be uploading new ones)
            if (Array.isArray(assets) && assets.length > 0) {
              for (const asset of assets) {
                await github.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id,
                })
              }
            }

            return release.upload_url

      - name: Upload rootfs for the release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: dist/${{ env.ARCH }}/installer/rootfs.img
          asset_name: ${{ env.ARCH }}.rootfs.img
          asset_content_type: application/octet-stream
